{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyscpi","text":"<p>A Python library for communicating with SCPI devices and a helper library for communicating with the Keysight's Smart Bench Essentials educational equipment. The library communicates using multiple backends including PyVisa, USBTMC and socket communication. The library also provides helper functions for reading oscilloscope waveforms and plotting them.</p>"},{"location":"#using-pyvisa-and-keysights-iolibrary","title":"Using PyVisa and Keysight's IOLibrary","text":"<p>you need to install Keysight's IOLibrary and PyVisa.</p>"},{"location":"#using-alternative-methods-including-usb-and-ethernet","title":"Using alternative methods including usb and ethernet","text":"<p>You can use USBTMC, a standard for communicating with instruments using USB using generic drivers. This method works both in Windows and WSL2. Alternatively, you can use the standard TCP/IP sockets to communicate with the instrument. However, you need to connect the instrument on the same network as your computer, either using a direct ethernet cable or a switch/router. If you are not using a router, then you may need to set the instrument's IP address manually or use a DHCP server for dynamic IP allocation. Further information can be found in the here.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installing","title":"Installing","text":"<p>You can install the library using pip:</p> <pre><code>python -m pip install --upgrade pyscpi\n</code></pre>"},{"location":"#connecting-to-the-instrument-using-pyvisa","title":"connecting to the instrument using PyVisa","text":"<pre><code>import pyvisa as visa\n\nrm = visa.ResourceManager()\ninst = rm.open_resource('&lt;resource address&gt;')\n\nprint(inst.query('*IDN?'))\n</code></pre>"},{"location":"#connecting-to-the-instrument-using-usbtmc","title":"connecting to the instrument using USBTMC","text":"<pre><code>from pyscpi import usbtmc\n\ninst =  usbtmc.Instrument(&lt;VendorID&gt;, &lt;ProductID&gt;)\n\nprint(inst.query(\"*IDN?\"))\n</code></pre>"},{"location":"#connecting-to-the-instrument-using-socket-driverless","title":"connecting to the instrument using socket (driverless)","text":"<pre><code>from pyscpi import scpi\n\ninst = scpi.Instrument('&lt;IP address&gt;', 5025)\n\nprint(inst.query('*IDN?'))\n</code></pre>"},{"location":"#reading-oscilloscope-waveform","title":"Reading oscilloscope waveform","text":"<pre><code>from pyscpi.keysight import osc\nimport numpy as np\n\nt, y1 = osc.readSingleChannel(inst, 1)\n</code></pre>"},{"location":"#plotting-oscilloscope-waveform","title":"Plotting oscilloscope waveform","text":"<pre><code># %matplotlib ipympl\nimport matplotlib.pyplot as plt\n\nplt.plot(t, y1)\nplt.show()\n</code></pre>"},{"location":"#closing-the-connection","title":"closing the connection","text":"<pre><code>inst.close()\n</code></pre>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Thanks to Keysight Education for providing the Smart Bench Essentials educational equipment.</p> <p>USBTMC is used for communicating with the instruments using USB.</p>"},{"location":"connections/","title":"Connection Guide","text":"<p>There are several ways to connect the instrument to your computer. You can use any of the following methods:</p>"},{"location":"connections/#keysight-io-libraries-suite-using-usb","title":"Keysight IO Libraries Suite using USB","text":"<p>The easiest method for connecting your oscilloscope to a laptop is using the Keysight IO Libraries Suite. This comprehensive collection of instrument drivers enables seamless communication between the oscilloscope and your computer. The software can be easily downloaded from the Keysight website, and once installed, it allows for a direct USB or Ethernet connection between the instrument and the laptop. While the option to connect via Ethernet is available, it is recommended to use the USB connection as it is generally more straightforward to set up.</p>"},{"location":"connections/#windows","title":"Windows","text":"<p>Simply download and run the installer with admin privilege from the Keysight website. Once installed, you can connect the oscilloscope to the laptop using a USB cable.</p>"},{"location":"connections/#wsl2","title":"WSL2","text":"<p>WSL2 is not yet supported using this method. Please refer to other methods for connecting using WSL2.</p>"},{"location":"connections/#usbtmc","title":"USBTMC","text":"<p>This method is based on USBTMC (USB Test and Measurement Class) protocol, which is a USB class protocol that allows communication with instruments that support the USBTMC standard. USBTMC is a standard protocol for controlling test and measurement instruments over USB and it allows for bi-directional communication between the instrument and the computer. This method is useful for connecting the oscilloscope to the computer as it uses a standard USB connection, which is widely available on most computers.</p>"},{"location":"connections/#windows_1","title":"Windows","text":"<ul> <li>Install the Zadig driver installer. (closed software, run at your own risk)</li> <li>Connect the oscilloscope to the computer using a USB cable.</li> <li>Open Zadig and select the oscilloscope from the list of devices.</li> <li>Select the WinUSB driver from the list of drivers and click on the Replace Driver button.</li> <li>Install libusb by downloading the latest archive</li> <li>Extract the archive and copy the <code>libusb-1.0.dll</code> from <code>VS2015-x64/dll/</code> to the <code>C:\\Windows\\System32</code> folder. (you need admin privilege to do this)</li> <li>install the PyUSB library using command <code>python -m pip install pyusb</code>.</li> <li>In the code, use the following code to connect to the instrument: <pre><code>from pyscpi import usbtmc\n\ninst =  usbtmc.Instrument(&lt;VendorID&gt;, &lt;ProductID&gt;)\n</code></pre></li> <li>Replace <code>&lt;VendorID&gt;</code> and <code>&lt;ProductID&gt;</code> with the Vendor ID and Product ID of the instrument.</li> </ul>"},{"location":"connections/#wsl2_1","title":"WSL2","text":"<ul> <li>Install usbipd-win by downloading and running the latest <code>*.msi</code> release.</li> <li>follow the commands here to prepare WSL2 for usbipd-win. <pre><code>sudo apt install linux-tools-virtual hwdata\nsudo update-alternatives --install /usr/local/bin/usbip usbip `ls /usr/lib/linux-tools/*/usbip | tail -n1` 20\n</code></pre></li> <li>Install the latest version of wsl-usb-gui.</li> <li>Open <code>wsl-usb-gui</code> and select the oscilloscope from the list of devices.</li> <li>Click the <code>Attach</code> button. This will attach the oscilloscope to WSL2, and detach it from Windows.</li> <li>Confirm that the oscilloscope is attached to WSL2 by running the following command in WSL2 by running <code>lsusb</code>.</li> <li>You should enable permissions for <code>udev</code> to access the device.</li> <li>In WSL2 install the PyUSB library using command <code>python -m pip install pyusb</code>.</li> <li>In the code, use the following code to connect to the instrument: <pre><code>from pyscpi import usbtmc\n\ninst =  usbtmc.Instrument(&lt;VendorID&gt;, &lt;ProductID&gt;)\n</code></pre></li> <li>Replace <code>&lt;VendorID&gt;</code> and <code>&lt;ProductID&gt;</code> with the Vendor ID and Product ID of the instrument.</li> </ul>"},{"location":"connections/#tcpip-sockets-driverless","title":"TCP/IP Sockets (Driverless)","text":"<p>There are several other methods for connecting your oscilloscope to your computer. These methods do not require using the Keysight IO Libraries Suite, and can be adjusted manually based on project requirements. It's important to note that these methods may require more technical knowledge and may be more challenging to set up compared to using the Keysight IO Libraries Suite. These methods apply to all Keysight Smart Bench Essentials.</p>"},{"location":"connections/#direct-ethernet-cable","title":"Direct Ethernet Cable","text":"<p>This method of connecting the oscilloscope to the laptop is based on a direct Ethernet connection. This method involves connecting the oscilloscope and the laptop using an Ethernet cable and establishing a direct communication link between the two devices.However, to establish a stable connection, additional network configurations such as IP addressing may be required. In this method, it is recommended to use APIPA (Automatic Private IP Addressing) over DHCP because it eliminates the need for additional software or a DHCP server to be present on the network. This can be useful in laboratory settings where a DHCP server is not available or difficult to set up. However, it's important to note that using APIPA may lead to poor perfromance and may cause issues with the connection especially in laptops with more than one network interface. In these cases, it is recommended to use DHCP instead.</p>"},{"location":"connections/#using-apipa-windows-wsl2","title":"using APIPA (Windows &amp; WSL2)","text":""},{"location":"connections/#using-dhcp-windows-wsl2","title":"using DHCP (Windows &amp; WSL2)","text":""},{"location":"connections/#switch","title":"Switch","text":"<p>This method of connecting the oscilloscope to the laptop is based on a switch connection. This method involves connecting the oscilloscope and the laptop using a powered switch. Using More than once device can be connected to the laptop. Similar to the previous method of connecting the oscilloscope to the laptop, additional network configurations such as IP addressing may be required. In this method, it is recommended to use APIPA (Automatic Private IP Addressing) over DHCP because it eliminates the need for additional software or a DHCP server to be present on the network. This can be useful in laboratory settings where a DHCP server is not available or difficult to set up. However, it's important to note that using APIPA may lead to poor perfromance and may cause issues with the connection especially in laptops with more than one network interface. In these cases, it is recommended to use DHCP instead. use the same instructions as the previous method.</p>"},{"location":"connections/#router","title":"Router","text":"<p>This method is same as the previous method of connecting the oscilloscope to the laptop, but instead of using a switch, a router is used. This method involves connecting the oscilloscope and the laptop using a router. Using More than once device can be connected to the laptop. However unlike the previous methods  additional network configurations such as IP addressing is not required since the router is responsible for assigning IP addresses to the devices connected to it. Simply connect the oscilloscope to the router using an Ethernet cable and connect the laptop to the router using ethernet cable.</p> <p>It is important to note that this method may require privileged access to the router, which is generally unavailable in laboratory or enterprise settings due to security measures such as MAC address filtering. This can limit the usability of this method in such environments. However, this method can be useful in home networks where the router is not configured for automatic IP assignment and users have more control over the network settings. In such settings, users may connect the oscilloscope and the laptop without the need for additional network configurations.</p>"},{"location":"API/osc/","title":"pyscpi.keysight.osc","text":""},{"location":"API/osc/#pyscpi.keysight.osc.Preamble","title":"<code>Preamble</code>  <code>dataclass</code>","text":"<p>A class to store the preamble data from the oscilloscope channel.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>str</code> <p>The format of the data</p> required <code>type</code> <code>str</code> <p>The type of the data</p> required <code>points</code> <code>int</code> <p>The number of points</p> required <code>xinc</code> <code>float</code> <p>The x increment</p> required <code>xorg</code> <code>float</code> <p>The x origin</p> required <code>xref</code> <code>float</code> <p>The x reference</p> required <code>yinc</code> <code>float</code> <p>The y increment</p> required <code>yorg</code> <code>float</code> <p>The y origin</p> required <code>yref</code> <code>float</code> <p>The y reference</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.autoScale","title":"<code>autoScale(inst)</code>","text":"<p>Autoscales the oscilloscope.</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.getPreamble","title":"<code>getPreamble(inst, debug=False)</code>","text":"<p>Reads the preamble from the oscilloscope.</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>debug</code> <code>bool</code> <p>Print debug messages</p> <code>False</code> <p>Returns:</p> Type Description <code>Preamble</code> <p>A Preamble object</p>"},{"location":"API/osc/#pyscpi.keysight.osc.readChannels","title":"<code>readChannels(inst, channels, points=0, runAfter=True, debug=False)</code>","text":"<p>Reads multiple channels from the oscilloscope.</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>channels</code> <code>list[int]</code> <p>A list of channels to read eg. [1, 2]</p> required <code>points</code> <code>int</code> <p>The number of points to read. If 0, read all points</p> <code>0</code> <code>runAfter</code> <code>bool</code> <p>Run the oscilloscope after reading</p> <code>True</code> <code>debug</code> <code>bool</code> <p>Print debug messages</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[ndarray, ndarray]</code> <p>A NumPy tuple of time and voltage arrays</p>"},{"location":"API/osc/#pyscpi.keysight.osc.readSingleChannel","title":"<code>readSingleChannel(inst, channel, points=0, runAfter=True, debug=False)</code>","text":"<p>Reads a single channel from the oscilloscope.</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>channel</code> <code>int</code> <p>The channel to read</p> required <code>points</code> <code>int</code> <p>The number of points to read. If 0, read all points</p> <code>0</code> <code>runAfter</code> <code>bool</code> <p>Run the oscilloscope after reading</p> <code>True</code> <code>debug</code> <code>bool</code> <p>Print debug messages</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[ndarray, ndarray]</code> <p>A NumPy tuple of time and voltage arrays</p>"},{"location":"API/osc/#pyscpi.keysight.osc.setChannelAxis","title":"<code>setChannelAxis(inst, channel, scale, offset)</code>","text":"<p>Sets the channel axis (y-axis) of the oscilloscope.</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>channel</code> <code>int</code> <p>The channel to set</p> required <code>scale</code> <code>float</code> <p>The scale of the channel axis in volts</p> required <code>offset</code> <code>float</code> <p>The offset of the channel axis in volts</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setTimeAxis","title":"<code>setTimeAxis(inst, scale, position)</code>","text":"<p>Sets the time axis of the oscilloscope.</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>scale</code> <code>float</code> <p>The scale of the time axis in seconds</p> required <code>position</code> <code>float</code> <p>The position of the time axis from the trigger in seconds</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenDC","title":"<code>setWGenDC(inst, offset)</code>","text":"<p>Sets the waveform generator to a DC wave. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>offset</code> <code>float</code> <p>The offset of the DC wave in volts</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenNoise","title":"<code>setWGenNoise(inst, v0, v1, offset)</code>","text":"<p>Sets the waveform generator to a noise wave. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>v0</code> <code>float</code> <p>The voltage of the low state in volts</p> required <code>v1</code> <code>float</code> <p>The voltage of the high state in volts</p> required <code>offset</code> <code>float</code> <p>The offset of the noise wave in volts</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenOutput","title":"<code>setWGenOutput(inst, state)</code>","text":"<p>Sets the output state of the waveform generator. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>state</code> <code>int | str</code> <p>The state to set the output to (0 or 1) or ('OFF' or 'ON')</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenPulse","title":"<code>setWGenPulse(inst, v0, v1, period, pulseWidth)</code>","text":"<p>Sets the waveform generator to a pulse wave. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>v0</code> <code>float</code> <p>The voltage of the low state in volts</p> required <code>v1</code> <code>float</code> <p>The voltage of the high state in volts</p> required <code>period</code> <code>float</code> <p>The period of the pulse wave in seconds. The period can be adjusted from 10 ns to 10 s.</p> required <code>pulseWidth</code> <code>float</code> <p>The pulse width can be adjusted from 20 ns to the period minus 20 ns.</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenRamp","title":"<code>setWGenRamp(inst, v0, v1, freq, symmetry)</code>","text":"<p>Sets the waveform generator to a ramp wave. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>v0</code> <code>float</code> <p>The voltage of the low state in volts</p> required <code>v1</code> <code>float</code> <p>The voltage of the high state in volts</p> required <code>freq</code> <code>float</code> <p>The frequency of the ramp wave in Hz. The frequency can be adjusted from 100 mHz to 100 kHz.</p> required <code>symmetry</code> <code>int</code> <p>Symmetry represents the amount of time per cycle that the ramp waveform is rising and can be adjusted from 0% to 100%.</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenSin","title":"<code>setWGenSin(inst, amp, offset, freq)</code>","text":"<p>Sets the waveform generator to a sine wave. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>amp</code> <code>float</code> <p>The amplitude of the sine wave in volts</p> required <code>offset</code> <code>float</code> <p>The offset of the sine wave in volts</p> required <code>freq</code> <code>float</code> <p>The frequency of the sine wave in Hz. The frequency can be adjusted from 100 mHz to 20 MHz.</p> required"},{"location":"API/osc/#pyscpi.keysight.osc.setWGenSquare","title":"<code>setWGenSquare(inst, v0, v1, freq, dutyCycle)</code>","text":"<p>Sets the waveform generator to a square wave. (Only available on specific models)</p> <p>Parameters:</p> Name Type Description Default <code>inst</code> <p>The instrument object from pyscpi or pyvisa</p> required <code>v0</code> <code>float</code> <p>The voltage of the low state in volts</p> required <code>v1</code> <code>float</code> <p>The voltage of the high state in volts</p> required <code>freq</code> <code>float</code> <p>The frequency of the square wave in Hz. The frequency can be adjusted from 100 mHz to 10 MHz.</p> required <code>dutyCycle</code> <code>int</code> <p>The duty cycle can be adjusted from 1% to 99% up to 500 kHz. At higher frequencies, the adjustment range narrows so as not to allow pulse widths less than 20 ns.</p> required"},{"location":"API/scpi/","title":"pyscpi.scpi","text":""}]}